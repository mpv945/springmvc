<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
		 version="4.0">

	<!--微服务网关https://springcloud.cc/spring-cloud-config.html#_encryption_and_decryption 和http://www.baeldung.com/spring-cloud-configuration
	https://blog.csdn.net/hry2015/article/details/78245149 和https://www.cnblogs.com/liferecord/p/6880883.html
	https://www.cnblogs.com/andyfengzp/p/6835969.html -->
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>

	<!-- 配置spring的profile -->
	<context-param>
		<param-name>spring.profiles.active</param-name>
		<param-value>development</param-value>
	</context-param>

	<!-- Spring配置文件 -->
	<!--默认加载上下文的 路径在 public static final String DEFAULT_CONFIG_LOCATION = "/WEB-INF/applicationContext.xml";-->
	<!--可以自定义在 例如 classpath:applicationContext.xml 或者classpath:spring/spring-*.xml，多个用,号隔开，如果*能扫进来，不需要在文件导入关联的xml-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<!--<param-value>classpath:spring-root.xml,classpath:springmvc/spring-*.xml</param-value>-->
		<param-value>classpath:spring-config/spring-*.xml</param-value>
	</context-param>

	<!--java 配置-->
<!--	<context-param>
		<param-name>contextClass</param-name>
		<param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value>
	</context-param>
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>com.aws.demo.config.AppConfig</param-value>
	</context-param>-->

	<!-- Spring监听器， 加载上下文配置-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>


	<!--spring web-->
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!--Spring MVC中DispatcherServlet默认使用WebApplicationContext作为上下文，Spring默认配置文件为“/WEB-INF/[servlet名字]-servlet.xml”。-->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring-mvc.xml,classpath:shiro/spring-*.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<!--也可以配置*.do或者*.action-->
		<!--可以配置*.do或*.action，所有请求的url扩展名为.do或.action由springmvc解析，此种方法常用 不可以/*，如果配置/*，返回jsp也由springmvc解析，这是不对的。-->
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<!--web.xml中，这段配置要放在所有filter的最前面-->
	<filter>
		<!--//过滤器使用spring类CharacterEncodingFilter-->
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<!--//过滤所有的路径：/*代表所有的路径-->
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>


	<!--DelegatingFilterProxy 类将通过springSessionRepositoryFilter 这个名称去查找Spring容器中配置的Bean并将其转换为过滤器，
	对于调用DelegatingFilterProxy的每个请求，将调用springSessionRepositoryFilter这个过滤器。代理name指定的filter
	https://blog.csdn.net/u011150002/article/details/72403720-->
<!--	<filter>
		<filter-name>mapperFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>mapperFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>-->


	<!-- shiro的filter -->
	<!-- shiro过虑器，DelegatingFilterProxy通过代理模式将spring容器中的bean和filter关联起来 -->
	<filter>
		<filter-name>shiroFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<!-- 设置true由servlet容器控制filter的生命周期，"targetFilterLifecycle"为True,则spring来管理Filter.init()和Filter.destroy();若为false,则这两个方法失效!! -->
		<init-param>
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
		<!-- 设置spring容器filter的bean id，如果不设置则找与filter-name一致的bean-->
		<init-param>
			<param-name>targetBeanName</param-name>
			<param-value>shiroFilter</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	
</web-app>