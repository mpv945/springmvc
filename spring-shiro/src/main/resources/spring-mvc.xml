<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--spring mvc 配置只扫描控制器和DispatcherServlet相关的自定义配置。其他例如数据库和事务等配置可以放在父配置，也能访问-->
    <context:component-scan base-package="org.haijun.study" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
        <context:include-filter type="annotation" expression="org.apache.shiro.authz.annotation.RequiresRoles" />
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.RestController" />
    </context:component-scan>


    <!--springmvc的配置中配置一遍,Controller中的@Value注解便能取到值了.-->
    <context:property-placeholder
            properties-ref="applicationProperties" file-encoding="UTF-8" ignore-unresolvable="false"/>

    <!-- 开启aop，对类代理 -->
    <!--<aop:config proxy-target-class="true"></aop:config>-->
    <!-- 保证实现了 Shiro 内部 lifecycle 函数的 bean 执行
 LifecycleBeanPostProcessor将Initializable和Destroyable的实现类统一在其内部自动分别调用了Initializable.init()
 和Destroyable.destroy()方法，从而达到管理shiro bean生命周期的目的。-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
    <!--https://www.cnblogs.com/zr520/p/5009790.html     https://blog.csdn.net/jc_zhibaobao/article/details/77163964-->
    <!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->
    <!-- 配置以下两个bean即可实现此功能 -->
    <!-- Enable Shiro Annotations for Spring-configured beans. Only run after the lifecycleBeanProcessor has run -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>

    <!-- 开启aop，对类代理，如果主配置没有添加aop,需要添加开启aop代理配置开关	 -->
    <!--< proxy-target-class="true"></aop:config>-->
    <!-- 开启shiro注解支持，我方到自己配置文件 --><!--添加Shiro Spring AOP权限注解的支持-->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager" />
    </bean>
    <!-- 开启shiro注解支持 -->
<!--    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager" />
    </bean>-->

    <!--开启新的注解驱动，可以手动指定validator=""-->
    <!-- 通过annotation-driven可以替代下边的处理器映射器和适配器 -->
    <!--<mvc:annotation-driven conversion-service="conversionService" validator="validator" />-->
    <mvc:annotation-driven />

    <!-- 配置视图解析器 要求将jstl的包加到classpath -->
    <!-- ViewResolver -->
<!--    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/" />
        <property name="suffix" value=".jsp" />
    </bean>-->
    <!-- 设置freeMarker的配置文件路径 -->
    <bean id="freemarkerConfiguration" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="location" value="classpath:freemarker.properties"/>
    </bean>
    <!-- 配置freeMarker的模板路径 -->
    <!--<bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">-->
    <bean class="org.haijun.study.shiro.FreeMarkerConfigExtend"><!--让freeMarker支持shiro标签-->
        <property name="templateLoaderPath" value="/WEB-INF/views/ftl/" />
        <property name="defaultEncoding" value="utf-8" />
        <property name="freemarkerSettings" ref="freemarkerConfiguration"/>
    </bean>
    <bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver" id="freeMarkerViewResolver">
        <property name="cache" value="true"></property><!--控制缓存模式 - 这应该仅在调试和开发时禁用。-->
        <!--<property name="prefix" value="" />--><!-- 上面已经配了，这里就不用配啦 -->
        <property name="suffix" value=".ftl" />
        <property name="contentType" value="text/html;charset=utf-8"></property>
<!--
        <property name="allowSessionOverride" value="true" />
        <property name="allowRequestOverride" value="true" />
        <property name="exposeSpringMacroHelpers" value="true" />
        <property name="exposeRequestAttributes" value="true" />
        <property name="exposeSessionAttributes" value="true" />
        <property name="requestContextAttribute" value="request" />-->
    </bean>

    <!-- 转换器 -->
<!--    <bean id="conversionService"
          class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <list>
                &lt;!&ndash;实现Converter接口&ndash;&gt;
                &lt;!&ndash;<bean class="cn.itcast.ssm.controller.converter.CustomDateConverter" />
                <bean class="cn.itcast.ssm.controller.converter.StringTrimConverter" />&ndash;&gt;
            </list>
        </property>
    </bean>-->

    <!-- 校验器 -->
<!--    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        &lt;!&ndash; 校验器 &ndash;&gt;
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
        &lt;!&ndash; 指定校验使用的资源文件，如果不指定则默认使用classpath下的ValidationMessages.properties &ndash;&gt;
        <property name="validationMessageSource" ref="messageSource" />
    </bean>
    &lt;!&ndash; 校验错误信息配置文件 &ndash;&gt;
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        &lt;!&ndash; 资源文件名 &ndash;&gt;
        <property name="basenames">
            <list>
                <value>classpath:CustomValidationMessages</value>
            </list>
        </property>
        &lt;!&ndash; 资源文件编码格式 &ndash;&gt;
        <property name="fileEncodings" value="utf-8" />
        &lt;!&ndash; 对资源文件内容缓存时间，单位秒 &ndash;&gt;
        <property name="cacheSeconds" value="120" />
    </bean>-->

</beans>