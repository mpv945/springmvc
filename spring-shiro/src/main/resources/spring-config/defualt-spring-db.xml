<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="
       http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

<!--参考书籍：https://github.com/mybatis-book/book，spring boot 使用https://github.com/abel533/MyBatis-Spring-Boot
https://github.com/abel533/Mapper/wiki/3.config-->
    <!--导入数据库配置-->
    <import resource="dataSource.xml" />

    <!-- 配置事务管理器，注意这里的dataSource和SqlSessionFactoryBean的dataSource要一致，不然事务就没有作用了 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 定义拦截器，用来指定事务属性、级别和异常处理 -->
    <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="transactionManager"></property>
        <property name="transactionAttributes">
            <props>
                <prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="update*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="delete*"> PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
                <prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
            </props>
        </property>
    </bean>

    <!-- 用来定义哪些类需要事务管理 spring事务动态代理类 BeanNameAutoProxyCreator 根据类名自动代理，接受表达式 -->
    <bean id="BeanProxy" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="beanNames">
            <!-- 对类名以Service结尾的类进行代理 -->
            <value>*Service</value>
        </property>
        <!-- 对代理类进行加载拦截器(实现通知的过程) -->
        <property name="interceptorNames">
            <list>
                <value>transactionInterceptor</value>
            </list>
        </property>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!--扫描映射文件-->
        <property name="mapperLocations">
            <array>
                <value>classpath:mapper/*.xml</value>
            </array>
        </property>
        <!-- 自动扫描mapping.xml文件，**表示迭代查找,也可在sqlMapConfig.xml中单独指定xml文件-->
        <!--<property name="mapperLocations" value="classpath:com/hua/saf/**/*.xml" />-->
        <property name="typeAliasesPackage" value="org.haijun.study.entity" />
        <!--配置拦截器 com.github.pagehelper.PageInterceptor-->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
                    <!--分页具体使用https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md-->
                    <property name="properties">
                        <value>
                            <!--helperDialect：分页插件会自动检测当前的数据库链接，自动选择合适的分页方式。 你可以配置helperDialect属性来指定分页插件使用哪种方言。
                            oracle,mysql,mariadb,sqlite,hsqldb,postgresql,db2,sqlserver,informix,h2,sqlserver2012,derby
                            你也可以实现 AbstractHelperDialect，然后配置该属性为实现类的全限定名称即可使用自定义的实现方法。-->
                            helperDialect=mysql
                            <!--分页合理化参数，默认值为false。当该参数设置为 true 时，pageNum<=0 时会查询第一页
                            pageNum>pages（超过总数时），会查询最后一页。默认false 时，直接根据参数进行查询。-->
                            reasonable=true
                            <!--支持通过 Mapper 接口参数来传递分页参数，默认值false，分页插件会从查询方法的参数值中，
                            自动根据上面 params 配置的字段中取值，查找到合适的值时就会自动分页-->
                            supportMethodsArguments=true
<!--                            为了支持startPage(Object params)方法，增加了该参数来配置参数映射，用于从对象中根据属性名取值，
                            可以配置 pageNum,pageSize,count,pageSizeZero,reasonable，不配置映射的用默认值， 默认值为
                            pageNum=pageNum;pageSize=pageSize;count=countSql;reasonable=reasonable;pageSizeZero=pageSizeZero-->
                            params=count=countSql
                            autoRuntimeDialect=true
                        </value>
                    </property>
                </bean>
            </array>
        </property>

        <!--如果在配置好类别名和映射可以不需要配置configLocation-->
        <!--<property name="configLocation" value="classpath:sqlMapConfig.xml" />-->

    </bean>

    <!-- mybatis spring sqlSessionTemplate,使用时直接让spring注入即可：参考http://www.mybatis.org/spring/zh/sqlsession.html#SqlSessionTemplate
     http://www.mybatis.org/spring/zh/sqlsession.html-->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
    </bean>

    <!--dao接口所在的包，可以到达自动注册接口，在servlet就可以直接实现，类似jpa-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.cn.spring.learn.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

   <!-- 在容器启动时初始化一些数据,spirng boot 可以参考https://blog.csdn.net/wncnke/article/details/54906361 -->
    <jdbc:initialize-database data-source="dataSource" enabled="true">
        <jdbc:script execution="INIT" location=""/>
    </jdbc:initialize-database>

</beans>