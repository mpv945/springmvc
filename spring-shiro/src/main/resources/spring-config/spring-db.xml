<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="
       http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--导入数据库配置-->
    <import resource="dataSource.xml" />

    <!-- 配置事务管理器，注意这里的dataSource和SqlSessionFactoryBean的dataSource要一致，不然事务就没有作用了 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 定义拦截器，用来指定事务属性、级别和异常处理 -->
    <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="transactionManager"></property>
        <property name="transactionAttributes">
            <props>
                <prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="update*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="delete*"> PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
                <prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
            </props>
        </property>
    </bean>
    <!-- 用来定义哪些类需要事务管理 spring事务动态代理类 BeanNameAutoProxyCreator 根据类名自动代理，接受表达式 -->
    <bean id="BeanProxy" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="beanNames">
            <!-- 对类名以Service结尾的类进行代理 -->
            <value>*Service</value>
        </property>
        <!-- 对代理类进行加载拦截器(实现通知的过程) -->
        <property name="interceptorNames">
            <list>
                <value>transactionInterceptor</value>
            </list>
        </property>
    </bean>


    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!--扫描映射文件-->
        <property name="mapperLocations">
            <array>
                <value>classpath:mapper/*.xml</value>
            </array>
        </property>
        <!-- 自动扫描mapping.xml文件，**表示迭代查找,也可在sqlMapConfig.xml中单独指定xml文件-->
        <!--<property name="mapperLocations" value="classpath:com/hua/saf/**/*.xml" />-->
        <property name="typeAliasesPackage" value="org.haijun.study.entity" />
        <!--配置拦截器 com.github.pagehelper.PageInterceptor-->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <value>
                            helperDialect=mysql
                            reasonable=true
                            supportMethodsArguments=true
                            params=count=countSql
                            autoRuntimeDialect=true
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!--dao接口所在的包，可以到达自动注册接口，在servlet就可以直接实现，类似jpa-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="org.haijun.study.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 在容器启动时初始化一些数据,spirng boot 可以参考https://blog.csdn.net/wncnke/article/details/54906361 -->
    <!--enabled 可以读取配置文件的值enabled="#{systemProperties.INITIALIZE_DATABASE}"-->
<!--    ignore-failures有三个值：NONE,DROPS,ALL；NONE时，不忽略任何错误，当sql执行报错时服务启动终止。
    设置为DROPS时，忽略删除错误，如当sql中有一个删除表而表不存在，此时这个错误会被忽略。
    设置为ALL时，忽略任何错误。
    separator=";" 参数设置脚本执行分隔符。默认sql 为;-->
    <jdbc:initialize-database data-source="dataSource" enabled="true" ignore-failures="ALL">
        <jdbc:script execution="INIT" location="classpath:sql/createTable.sql"/>
        <jdbc:script execution="INIT" location="classpath:sql/addData.sql"/>
    </jdbc:initialize-database>

</beans>