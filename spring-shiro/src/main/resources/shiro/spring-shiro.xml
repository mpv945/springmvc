<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!--boot 方式https://www.cnblogs.com/hyyq/p/6886004.html-->
	<!--参考https://blog.csdn.net/modjie/article/details/79221774
	https://blog.csdn.net/zhuchunyan_aijia/article/details/51744152
	https://blog.csdn.net/sage_wang/article/details/79592269
	https://www.cnblogs.com/hlhdidi/p/6376457.html
	https://blog.csdn.net/qq_31489805/article/details/80267916
	http://www.cnblogs.com/cshhs/p/9269411.html
	https://www.jianshu.com/p/f37f8c295057-->
	<!--纯redis-->
	<import resource="classpath:shiro/shiro-redis-session.xml" />
	<!--本地cache套redis-->
	<!--<import resource="classpath:shiro/shiro-cache-redis-session.xml" />-->

<!-- web.xml中shiro的filter对应的bean -->
<!-- Shiro 的Web过滤器 -->
	<bean id="shiroFilters" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<!-- loginUrl认证提交地址，如果没有认证将会请求此地址进行认证，请求此地址将由formAuthenticationFilter进行表单认证 -->
		<property name="loginUrl" value="/login" />
		<!-- 认证成功统一跳转到first.action，建议不配置，shiro认证成功自动到上一个请求路径 -->
		<!--<property name="successUrl" value="/first.action"/>-->
		<!-- 通过unauthorizedUrl指定没有权限操作时跳转页面-->
		<property name="unauthorizedUrl" value="/refuse" />
		<!-- 自定义filter配置 -->
		<property name="filters">
			<map>
				<!-- 将自定义 的FormAuthenticationFilter注入shiroFilter中-->
				<entry key="authc" value-ref="formAuthenticationFilter" />
			</map>
		</property>

		<!-- 过虑器链定义，从上向下顺序执行，一般将/**放在最下边 -->
		<property name="filterChainDefinitions">
			<value>
				<!-- 对静态资源设置匿名访问 -->
				<!--注：anon，authcBasic，auchc，user是认证过滤器，
				perms，roles，ssl，rest，port是授权过滤器 详情https://blog.csdn.net/j_bang/article/details/78233724-->
				/images/** = anon
				/js/** = anon
				/css/** = anon
				/favicon.ico = anon
				<!-- 验证码，可匿名访问 -->
				/kaptcha/getKaptchaImage = anon
				/kaptcha/checkmCode = anon
				/guest = anon
				<!-- 请求 logout.action地址，shiro去清除session-->
				/logout = logout
				<!--商品查询需要商品查询权限 ，取消url拦截配置，使用注解授权方式 -->
				<!-- /items/queryItems.action = perms[item:query]
				/items/editItems.action = perms[item:edit] -->
				<!--角色拦截-->
				<!--/roleTest = roles[admin,isShopMan]-->
				<!-- 配置记住我或认证通过可以访问的地址 -->
				/index.jsp  = user
				/first.action = user
				/welcome.jsp = user
				<!-- /** = authc 所有url都必须认证通过才可以访问-->
				/** = authc
				<!-- /** = anon所有url都可以匿名访问 -->

			</value>
		</property>

	</bean>

<!-- securityManager安全管理器 -->
<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="customRealm" />
		<!-- 注入缓存管理器 -->
		<!--<property name="cacheManager" ref="cacheManager"/>-->
		<!-- 注入session管理器 -->
		<!--<property name="sessionManager" ref="sessionManager" />-->
		<property name="sessionManager" ref="defaultWebSessionManager" />
		<!-- 记住我 -->
		<property name="rememberMeManager" ref="rememberMeManager"/>
		
	</bean>

	<!-- 自定义一个权限匹配器 然后在定义Realm里面的授权设置改成存放url：info.setStringPermissions(new HashSet<>(urlList))-->
	<bean id="permissionResolver" class="org.haijun.study.shiro.UrlPermissionResolver"/>
<!-- realm -->
<bean id="customRealm" class="org.haijun.study.shiro.CustomRealm">
	<!-- 将凭证匹配器设置到realm中，realm按照凭证匹配器的要求进行散列 -->
	<property name="credentialsMatcher" ref="credentialsMatcher"/>
	<!-- 将自定义的权限匹配器注入到自定义 Realm 中 -->
	<property name="permissionResolver" ref="permissionResolver"/>

	<!-- 配置缓存相关 -->
	<!-- 启用缓存 -->
<!--	<property name="cachingEnabled" value="true"/>
	&lt;!&ndash; 开启认证缓存&ndash;&gt;
	<property name="authenticationCachingEnabled" value="true"/>
	&lt;!&ndash; 指定认证缓存的名字(与 ehcache.xml 中声明的相同) &ndash;&gt;
	<property name="authenticationCacheName" value="shiro-authenticationCache"/>
	&lt;!&ndash;开启授权缓存&ndash;&gt;
	<property name="authorizationCachingEnabled" value="true"/>
	&lt;!&ndash; 指定授权缓存的名字(与 ehcache.xml 中声明的相同) &ndash;&gt;
	<property name="authorizationCacheName" value="shiro-authorizationCache"/>-->
</bean>

<!-- 凭证匹配器 -->
<bean id="credentialsMatcher"
	class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
	<!--md5/SHA-256-->
	<property name="hashAlgorithmName" value="SHA-256" />
	<property name="hashIterations" value="1" />
</bean>

<!-- 缓存管理器 -->
<!--<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
    	<property name="cacheManagerConfigFile" value="classpath:shiro/shiro-ehcache.xml"/>
    </bean>-->

<!-- 会话管理器 -->
<!--    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        &lt;!&ndash; session的失效时长，单位毫秒 &ndash;&gt;
        <property name="globalSessionTimeout" value="600000"/>
        &lt;!&ndash; 删除失效的session &ndash;&gt;
        <property name="deleteInvalidSessions" value="true"/>
    </bean>-->

<!-- 自定义form认证过虑器 -->
<!-- 基于Form表单的身份验证过滤器，不配置将也会注册此过虑器，表单中的用户账号、密码及loginurl将采用默认值，建议配置 -->
	<bean id="formAuthenticationFilter" class="org.haijun.study.shiro.CustomFormAuthenticationFilter">
		<!-- 表单中账号的input名称 -->
		<property name="usernameParam" value="username" />
		<!-- 表单中密码的input名称 -->
		<property name="passwordParam" value="password" />
		<!-- 记住我input的名称 -->
		<property name="rememberMeParam" value="rememberMe"/>

		<property name="loginUrl" value="/login"/>
	</bean>

<!-- rememberMeManager管理器，写cookie，取出cookie生成用户信息 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<property name="cookie" ref="rememberMeCookie" />
	</bean>
	<!-- 记住我cookie -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!-- rememberMe是cookie的名字 -->
		<constructor-arg value="rememberMe" />
		<!-- 记住我cookie生效时间30天 -->
		<property name="maxAge" value="2592000" />
	</bean>


</beans>