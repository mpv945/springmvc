<?xml version="1.0" encoding="UTF-8"?>

<!--        同步git。首先根据项目名在git上新建项目名
        如果windows 上打开git CMD；如果linux 直接安装git
        第一步执行 Git全局设置git config &#45;&#45;global user.name“xiehaijun” 或者 git config &#45;&#45;global user.email“xiehaijun@fulan.com.cn”
        第二部克隆到本地git clone http://shared-gitlab-elb-64450908.cn-north-1.elb.amazonaws.com.cn/xiehaijun/my_新建项目.git
        第三部 cd 本地项目路径（把前面eclipse下生成的项目文件copy到git克隆的目录下）
        第四部上传 git add .；  然后执行git commit -m "Initial commit"；最后执行git push -u origin master
        如果本地存在项目直接上传到git，可以使用以下步骤
        cd existing_repo
        git remote add origin http://shared-gitlab-elb-64450908.cn-north-1.elb.amazonaws.com.cn/xiehaijun/my_新项目名称.git
        git push -u origin &#45;&#45;all
        git push -u origin &#45;&#45;tags
        切换到某一分支：git checkout  分支名称
        合并分支：git merge 原分支  目标分支
        下载更下到本地 git pull origin master-->


<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.haijun.study</groupId>
  <artifactId>springmvc</artifactId>
  <packaging>pom</packaging>
  <version>1.0-SNAPSHOT</version>
<!--  Maven build父模块的时候，会自动build子模块
  父模块的packaging必须为POM-->
  <modules>
    <module>springmvc5</module>
    <module>spring-cxf</module>
    <module>springmvcxml</module>
      <module>spring-shiro</module>
      <module>spring-job</module>
      <module>spring-activiti</module>
  </modules>

  <name>springmvc</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <!--dependencyManagement元素。通过它元素来管理jar包的版本，让子项目中引用一个依赖而不用显示的列出版本号。-->
  <dependencyManagement>
<!--    <dependencies>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>1.3.3.RELEASE</version>
        <type>pom</type>
&lt;!&ndash;        import (Maven 2.0.9 之后新增)
        它只使用在<dependencyManagement>中，表示从其它的pom中导入dependency的配置&ndash;&gt;
        <scope>import</scope>
      </dependency>
    </dependencies>-->
  </dependencyManagement>

  <build>
    <!--锁定插件版本以避免使用Maven默认值（可以移动到父POM）-->
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.0.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.7.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.20.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>
