<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">



    <!--获得jenkins 的编译号，可以通过设定job任务时把jenkins 设定到项目的配置变量或者文件，通过控制器获取，
    jenkins内置变量参考https://www.cnblogs.com/ceshisanren/p/5639869.html-->


    <!--加载配置文件，一个spring 只能加载一次，多次加载后面的不会成功，这种配置最后放在主配置或者最开始被加载的配置文件里-->
    <context:property-placeholder location="classpath:batch.properties" />

    <!-- 扫描的包名 -->
    <!--若使用include-filter去定制扫描内容，要在use-default-filters="false"的情况下，不然会“失效”，被默认的过滤机制所覆盖-->
    <!--同样注意的是：在use-default-filters="false"的情况下，exclude-filter是针对include-filter里的内容进行排除。-->
   <!--<context:component-scan base-package="org.haijun.study" />-->
    <context:component-scan base-package="org.haijun.study">
        <!-- annotation是对注解进行扫描 -->
        <!--<context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>-->
        <!-- assignable是对类或接口进行扫描 过滤器扫描派生于expression属性所指定类型的那些类 -->
        <!--<context:include-filter type="assignable" expression="com.wjx.betalot.performer.Performer"/>
        <context:include-filter type="assignable" expression="com.wjx.betalot.performer.impl.Sonnet"/>-->
        <!--regex过滤器扫描类的名称与expression属性所指定正则表示式所匹配的那些类-->
        <!--<context:exclude-filter type="regex" expression=".service.*"/>-->
        <!--custom 使用自定义的org.springframework.core.type.TypeFliter实现类，该类由expression属性指定-->
        <!--<context:exclude-filter type="custom" expression="Colle"-->
        <!--aspectj过滤器扫描与expression属性所指定的AspectJ表达式所匹配的那些类-->
        <context:exclude-filter type="regex" expression=".controller.*"/>
    </context:component-scan>

    <!--导入数据库连接配置-->
    <import resource="classpath:database/db-connection.xml" />

    <!-- spring batch 本身所依赖的事务管理,使用spring batch命名空间，transactional advice（事务AOP）会被自动创建 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>


    <!--导入job的共同配置-->
    <!--<import resource="job/job-context.xml"/>-->
    <import resource="classpath:job/job-context.xml"/>
    <!--导入job实例配置-->
    <!--<import resource="job/job-sample1.xml" />-->
    <!--<import resource="job/job-fileReader.xml" />
    <import resource="job/job-flatAndxmlItem.xml" />
    <import resource="job/job-jdbc.xml" />
    <import resource="job/job-hibernate.xml"/>
    <import resource="job/job-jpa.xml"/>
    <import resource="job/job-mybatis.xml"/>
    <import resource="job/job-jms.xml"/>
    <import resource="job/job-custom-itemreader.xml" />
    <import resource="job/job-composite-write.xml" />
    <import resource="job/job-java-mail.xml" />
    <import resource="job/job-write-adapter.xml"/>
    <import resource="job/job-processor.xml" />
    <import resource="job/flow/job-flow.xml"/>
    <import resource="job/flow/job-conditional.xml"/>-->

    <import resource="quartz/quartz-comm.xml" />
    <import resource="classpath:batch/batch-job-testHandler.xml"/>


    <!-- 使用annotation定义事务 -->
    <!--<tx:annotation-driven transaction-manager="transactionManager" />-->

<!--    <tx:advice id="serviceAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="del*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="get*" read-only="true" propagation="SUPPORTS" />
            <tx:method name="query*" read-only="true" propagation="SUPPORTS" />
            <tx:method name="find*" read-only="true" propagation="SUPPORTS" />
            <tx:method name="*" propagation="SUPPORTS" />
            <tx:method name="*" rollback-for="Exception" />
        </tx:attributes>
    </tx:advice>

    <aop:config proxy-target-class="true">
        <aop:pointcut id="serviceMethod"
                      expression="execution(* com.cpic.caf.*.service.impl.*Impl.*(..))" />
        <aop:advisor pointcut-ref="serviceMethod" advice-ref="serviceAdvice" />
    </aop:config>-->

    <!--
     初始化脚本，主要用来创建spring-batch运行时的数据，应用生成环境时应该去掉此配置，手工创建下对应的表
     spring-batch本身job运行需要的表的创建脚本，spring-batch.jar中默认提供了各种数据库的DDL语句
      -->
<!--    <jdbc:initialize-database data-source="dataSource" ignore-failures="ALL">
        <jdbc:script location="classpath:/org/springframework/batch/core/schema-drop-mysql.sql" />
        <jdbc:script location="${batch.schema.script}" />
        &lt;!&ndash;数据库引擎的区别https://www.cnblogs.com/zhengah/p/4664297.html&ndash;&gt;
        <jdbc:script location="classpath:dbTables/tables_mysql_innodb.sql" />
    </jdbc:initialize-database>-->

    <!-- 引入batch目录下所有xml文件-->
    <!--<import resource="classpath:batch/*.xml"/>
    &lt;!&ndash; 引入quartz配置文件 &ndash;&gt;
    <import resource="classpath:quartz/*.xml"/>-->
</beans>