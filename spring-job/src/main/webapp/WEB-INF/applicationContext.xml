<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/context/spring-aop.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/context/spring-tx.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/context/spring-jdbc.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 引入batch目录下所有xml文件-->
    <import resource="classpath:batch/*.xml"/>
    <!-- 引入quartz配置文件 -->
    <import resource="classpath:quartz/*.xml"/>

    <!--获得jenkins 的编译号，可以通过设定job任务时把jenkins 设定到项目的配置变量或者文件，通过控制器获取，
    jenkins内置变量参考https://www.cnblogs.com/ceshisanren/p/5639869.html-->
    <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath:batch.properties" />

    <!-- 扫描的包名 -->
   <!-- <context:component-scan base-package="com.me.springbatch" />-->

    <!--
   初始化脚本，主要用来创建spring-batch运行时的数据，应用生成环境时应该去掉此配置，手工创建下对应的表
   spring-batch本身job运行需要的表的创建脚本，spring-batch.jar中默认提供了各种数据库的DDL语句
    -->
    <jdbc:initialize-database data-source="dataSource">
        <jdbc:script location="classpath:/org/springframework/batch/core/schema-drop-mysql.sql" />
        <jdbc:script location="classpath:/org/springframework/batch/core/schema-mysql.sql" />
    </jdbc:initialize-database>

    <!-- 数据源：spring batch 本身所依赖的数据源，记录运行参数及过程信息，配置参考https://www.cnblogs.com/weizhxa/p/6548413.html -->
    <!--配置别的数据源实例https://my.oschina.net/xinxingegeya/blog/340302-->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${batch.jdbc.driver}"></property>
        <property name="url" value="${batch.jdbc.url}"></property>
        <property name="username" value="${batch.jdbc.user}"></property>
        <property name="password" value="${batch.jdbc.password}"></property>
    </bean>

    <!-- spring batch 本身所依赖的事务管理,使用spring batch命名空间，transactional advice（事务AOP）会被自动创建 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <tx:advice id="serviceAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="del*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="get*" read-only="true" propagation="SUPPORTS" />
            <tx:method name="query*" read-only="true" propagation="SUPPORTS" />
            <tx:method name="find*" read-only="true" propagation="SUPPORTS" />
            <tx:method name="*" propagation="SUPPORTS" />
            <tx:method name="*" rollback-for="Exception" />
        </tx:attributes>
    </tx:advice>

    <aop:config proxy-target-class="true">
        <aop:pointcut id="serviceMethod"
                      expression="execution(* com.cpic.caf.*.service.impl.*Impl.*(..))" />
        <aop:advisor pointcut-ref="serviceMethod" advice-ref="serviceAdvice" />
    </aop:config>



</beans>