<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <batch:job id="xmlFileReadAndWriterJob">
        <batch:step id="xmlFileReadAndWriterStep">
            <tasklet>
                <chunk reader="xmlReader" writer="xmlWriter" commit-interval="2">
                </chunk>
            </tasklet>
        </batch:step>
    </batch:job>

    <!-- XML文件读取 -->
    <bean id="xmlReader" scope="step" class="org.springframework.batch.item.xml.StaxEventItemReader">
        <property name="fragmentRootElementName" value="credit"/><!--需要转换为java对象的根节点名字-->
        <!--<property name="fragmentRootElementNames" value="sdfds" />--><!--需要转换为java对象的根节点的命名空间-->
        <property name="resource" value="classpath:data/flat/xml/credit-card-bill-201303.xml"/><!--需要读取的资源文件-->
        <!--<property name="maxItemCount" value="111111" />--><!--能读取的最大条目数，默认值Integer.MAX_VALUE-->
        <property name="strict" value="true" /><!--默认为true，如果为false，文件资源不存在会异常-->
        <property name="unmarshaller" ref="creditMarshaller"/><!--Spring OXM实现类，负责将xml内容转换为java对象-->
    </bean>
    <!--xml转换为java处理（序列化组件）-->
    <bean id="creditMarshaller" class="org.springframework.oxm.xstream.XStreamMarshaller">
        <property name="aliases">
            <util:map id="aliases">
                <entry key="credit" value="org.haijun.study.model.bo.CreditBill" /><!-- 指定转换的java对象，value-ref=""-->
            </util:map>
        </property>
    </bean>

    <bean id="creditBill" scope="prototype" class="org.haijun.study.model.bo.CreditBill"/>

    <!-- XML文件写入 -->
    <bean id="xmlWriter" class="org.springframework.batch.item.xml.StaxEventItemWriter" scope="step">
        <property name="rootTagName" value="juxtapose"/>
        <property name="marshaller" ref="creditMarshaller"/>
        <property name="resource" value="file:target/credit-card-bill.xml"/>
    </bean>


    <!--多文件读取，-->
    <batch:job id="fileSetsJob">
        <batch:step id="fileSetsStep">
            <tasklet transaction-manager="transactionManager">
                <chunk reader="multiResourceReader" writer="csvItemWriter" commit-interval="2">
                </chunk>
            </tasklet>
        </batch:step>
    </batch:job>

    <!--MultiResourceItemReader 自身实现不是线程安全，不能在多线程并发使用该组件，如果要使用，应该使用分区功能-->
    <bean id="multiResourceReader" class="org.springframework.batch.item.file.MultiResourceItemReader">
        <property name="resources" value="classpath:data/flat/files/credit-card-bill-*.csv"/><!--可以定义多个或者通配符-->
        <property name="strict" value="true" /><!--是否允许文件为空-->
        <!--<property name="comparator" value=""--><!--资源文件比较器，对文件排序处理-->
        <property name="saveState" value="true"/> <!--默认为true；保存状态标识，读取资源时候是否保存当前读取的文件及当前文件是否读取条目记录的状态-->
        <property name="delegate" ref="flatFileItemReader"/><!--指定读取策略，将resources中定义的文件代理给当前指定的ItemReader进行处理，参数类型ResourceAwareItemReaderItemStream-->
    </bean>

    <bean id="flatFileItemReader" scope="step" class="org.springframework.batch.item.file.FlatFileItemReader">
        <property name="lineMapper" ref="lineMapper" />
        <property name="strict" value="true"/>
    </bean>

    <bean id="lineMapper" class="org.springframework.batch.item.file.mapping.DefaultLineMapper" >
        <property name="lineTokenizer" ref="delimitedLineTokenizer" />
        <property name="fieldSetMapper" ref="creditBillFieldSetMapper"/>
    </bean>

    <bean id="delimitedLineTokenizer" class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
        <property name="delimiter" value=","/>
        <property name="names" value="accountID,name,amount,date,address" />
    </bean>

    <bean id="creditBillFieldSetMapper" class="org.haijun.study.handler.CreditBillFieldSetMapper"></bean>

    <bean id="csvItemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter" scope="step">
        <property name="resource" value="file:target/outputFile.csv"/>
        <property name="lineAggregator">
            <bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
                <property name="delimiter" value=","></property>
                <property name="fieldExtractor">
                    <bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
                        <property name="names" value="accountID,name,amount,date,address"></property>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <bean id="creditBill" scope="prototype" class="org.haijun.study.model.bo.CreditBill"></bean>
</beans>