<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>springmvc</artifactId>
        <groupId>org.haijun.study</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>springmvc5</artifactId>
    <packaging>war</packaging>

    <name>springmvc5</name>
    <!-- FIXME change it to the project's website -->
    <url>http://www.example.com</url>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>

        <hibernate.validator>5.4.1.Final</hibernate.validator>
        <hibernate.version>5.2.11.Final</hibernate.version>
        <log4j2.version>2.11.0</log4j2.version>
    </properties>

    <dependencies>
        <!--Java注释配置Spring，需要在Servlet 3.0+ 的环境-->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
        </dependency>
        <!-- SpringMVC 依赖 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.0.4.RELEASE</version>
        </dependency>
        <!--jackson-->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>2.9.5</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.9.5</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-xml</artifactId>
            <version>2.9.5</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <version>2.9.5</version>
        </dependency>

        <!-- Spring 测试-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>5.0.4.RELEASE</version>
        </dependency>
        <!-- Thymeleaf 模板 -->
        <dependency>
            <groupId>org.thymeleaf</groupId>
            <artifactId>thymeleaf</artifactId>
            <version>3.0.9.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.thymeleaf</groupId>
            <artifactId>thymeleaf-spring5</artifactId>
            <version>3.0.9.RELEASE</version>
        </dependency>

        <!--lombok 自动工具插件-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.16.22</version>
            <scope>provided</scope>
        </dependency>

        <!-- 日志依赖库 -->
        <!--Log4j2 API, 默认配置在Create a log4j2.xml file under src/main/resources source folder -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>${log4j2.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>${log4j2.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>${log4j2.version}</version>
        </dependency>
        <!-- 使用web依赖 -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-web</artifactId>
            <version>${log4j2.version}</version>
        </dependency>
        <!--Async Logger	异步打印日志，采用了高性能并发框架Disruptor-->
        <dependency>
            <groupId>com.lmax</groupId>
            <artifactId>disruptor</artifactId>
            <version>3.4.2</version>
        </dependency>


        <!--数据相关-->
        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-jpa</artifactId>
            <version>2.0.7.RELEASE</version>
        </dependency>
        <!--Specification 工具https://github.com/wenhao/jpa-spec/blob/master/docs/3.2.3_cn.md-->
        <dependency>
            <groupId>com.github.wenhao</groupId>
            <artifactId>jpa-spec</artifactId>
            <version>3.2.3</version>
            <exclusions>
                <exclusion>
                    <groupId>org.hibernate.javax.persistence</groupId>
                    <artifactId>hibernate-jpa-2.1-api</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-data-jpa</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.springframework.data</groupId>
                    <artifactId>spring-data-jpa</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
<!--        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-orm</artifactId>
            <version>5.0.4.RELEASE</version>
        </dependency>-->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>${hibernate.version}</version>
        </dependency>
        <!-- mysql jdbc驱动 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.11</version>
        </dependency>
        <!--阿里巴巴druid开源连接池-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.1.10</version>
        </dependency>
        <!--tomcat-jdbc 数据连接池-->
        <dependency>
            <groupId>org.apache.tomcat</groupId>
            <artifactId>tomcat-jdbc</artifactId>
            <version>9.0.8</version>
        </dependency>

        <!--谷歌开发java工具包guava 参考资料http://ifeve.com/google-guava/-->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>25.1-jre</version>
        </dependency>

        <!--@Valid 验证接口-->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>${hibernate.validator}</version>
        </dependency>

        <!--aop 切面编程支持-->
<!--        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <version>1.8.13</version>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.8.13</version>
        </dependency>-->
<!--        <dependency>
            <groupId>cglib</groupId>
            <artifactId>cglib</artifactId>
            <version>3.2.6</version>
        </dependency>-->

        <!--swagger 支持；集成 swagger 的时候，jackson-databind包是必须依赖的，本项目其他依赖过了-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.8.0</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.8.0</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.github.dozermapper/dozer-core -->
        <dependency>
            <groupId>com.github.dozermapper</groupId>
            <artifactId>dozer-core</artifactId>
            <version>6.1.0</version>
        </dependency>

        <!--模板解析-->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-jexl3</artifactId>
            <version>3.1</version>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <!-- 源代码目录 -->
        <sourceDirectory>src/main/java</sourceDirectory>
        <!-- 主资源目录 -->
        <resources>
            <resource>
                <!-- 设置主资源目录 -->
                <directory>src/main/resources</directory>
                <!-- maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目下的资源文件时，是否对主资源目录开启资源过滤 -->
                <filtering>true</filtering>
                <!-- maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目下的资源文件时，只处理如下配置中包含的资源类型 -->
                <!-- 包括文件 -->
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <!-- maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目下的资源文件时，不处理如下配置中包含的资源类型（剔除下如下配置中包含的资源类型）-->
                <!-- 排除文件，这些文件打包的时候应该被排除 -->
                <excludes>
 <!--                   <exclude>config/dev/*.properties</exclude>
                    <exclude>config/product/*.properties</exclude>
                    <exclude>config/dev/*.xml</exclude>
                    <exclude>config/product/*.xml</exclude>-->
                    <exclude>config/dev/**</exclude>
                    <exclude>config/product/**</exclude>
                </excludes>
            </resource>
        </resources>

        <!--加载插件-->
        <plugins>
            <!--运行插件-->
            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>9.4.10.v20180503</version>
                <configuration>
                    <httpConnector>
                        <port>9965</port>
                    </httpConnector>
                    <!-- 自动热部署默认值是 0。大于 0 的数值表示开启，0 表示关闭，单位为秒。以配置
                    数值为一个周期，自动的扫描文件检查其内容是否有变化，如果发现文件的内容
                    被改变，则自动重新部署运用。 -->
                    <scanIntervalSeconds>0</scanIntervalSeconds>
                    <!-- 手动重加载;默认值为 automatic，它与大于 0 的 scanIntervalSeconds 节点一起作用，实现自动热部署的工作。设为 manual 的好处是，当你改变文件
                        内容并保存时，不会马上触发自动扫描和重部署的动作，你还可以继续的修改，直至你在 Console 或命令行中敲回车键（Enter）的时候才触发重
                        新加载的动作。 -->
                    <reload>manual</reload>
                    <!-- 转储快照,dumpOnStart 默认值为 false，如果设为 true，jetty 在启动时会把当前服务进程的内存信息输出到控制台中，但这并不会保存到文件中。 -->
                    <dumpOnStart>true</dumpOnStart>
                    <!-- 支持命令停止jetty:stop -->
                    <stopPort>9966</stopPort>
                    <stopKey>stop</stopKey>
                    <stopWait>3</stopWait>
                    <!-- 配置文件 -->
                    <!-- <systemPropertiesFile>${project.basedir}/mysys.props</systemPropertiesFile> -->
                    <!--   				<systemProperties>
                                          <val1>dfdsfds</val1>
                                          <systemProperty>
                                              <name>version</name>
                                              <value>2.11</value>
                                          </systemProperty>
                                      </systemProperties> -->
                    <!--<webApp>-->
                        <!--通过jetty:run运行-->
                        <!-- contextPath 的默认值的 /，${project.artifactId} 引用了 <artifactId> 节点的值，即项目的名称。 -->
                        <!--<contextPath>/</contextPath>-->
                        <!-- 项目的静态资源文件目录默认是 src/main/webapp，如果静态资源目录有多个，或者不在默认的 src/main/webapp 目录下，可做如下配置： -->
                        <!-- 				<resourceBases>
                                            <resourceBase>${project.basedir}/src/main/webapp</resourceBase>
                                            <resourceBase>${project.basedir}/commons</resourceBase>
                                        </resourceBases> -->
                    <!--</webApp>-->
                    <!--通过war包启动，jetty:run-war-->
                    <war>${basedir}/target/${project.name}.war</war>
                </configuration>
            </plugin>

            <!--使用这个打包命令 package -P product-->
            <!--打包插件，可以通过命令mvn clean package -D skipTests -P product 打生产的包-->
            <!--<packaging>war</packaging>才会触发war插件-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.2.1</version>
                <configuration>
                    <!--如果时servelt3.1使用bean配置，可以忽略web.xml加上下面一行-->
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                    <archive>
                        <!-- 打包后不包括pom的描述文件 -->
                        <addMavenDescriptor>false</addMavenDescriptor>
                    </archive>
                    <warName>${project.name}</warName>
                    <webResources>
                        <resource>
                            <!--要处理的目录-->
                            <directory>src/main/resources/config/${package.environment}</directory>
                            <!--打包之后存放位置-->
                            <targetPath>WEB-INF/classes</targetPath>
                            <filtering>true</filtering>
                        </resource>
                    </webResources>
                </configuration>
            </plugin>

           <!-- <plugin>
                &lt;!&ndash;打包时会乱码，是因为mvn -version 编码为和系统编码不一样&ndash;&gt;
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.10.1</version>
                <configuration>
                    <aggregate>true</aggregate>
                    <charset>UTF-8</charset>
                    <encoding>UTF-8</encoding>
                    <docencoding>UTF-8</docencoding>
                    <noqualifier>java.lang</noqualifier>
                    <overview>${basedir}/src/main/javadoc/overview.html</overview>
                    <javadocDirectory>${basedir}/src/main/javadoc</javadocDirectory>
                    <reportOutputDirectory>${project.reporting.outputDirectory}/api/${project.artifactId}/apidocs</reportOutputDirectory>
                    <additionalparam>-Xdoclint:none</additionalparam>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>-->

            <!--公共插件-->
            <plugin>
                <artifactId>maven-clean-plugin</artifactId>
            </plugin>
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
            </plugin>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
            </plugin>
            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
            </plugin>
            <plugin>
                <artifactId>maven-install-plugin</artifactId>
            </plugin>
            <plugin>
                <artifactId>maven-deploy-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    <!--声明 profile-->
    <profiles>
        <profile>
            <id>dev</id>
            <properties>
                <package.environment>dev</package.environment>
            </properties>
            <activation>
                <!-- 默认激活这个配置 -->
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <!-- 生产环境， -->
            <id>product</id>
            <properties>
                <package.environment>product</package.environment>
            </properties>
        </profile>
    </profiles>
</project>
