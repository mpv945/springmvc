<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!--继承-->
    <!--可继承的元素:groupId,version,description,url,inceptionYear,organization,licenses,contributors,mailingLists,scm,issueManagement
    ciManagement,properties,dependencyManagement,dependencies,repositories,pluginRepositories,build,reporting,profiles-->
    <!--不能被继承的：artifactId，name，prerequisites-->
    <parent>
        <artifactId>springmvc</artifactId>
        <groupId>org.haijun.study</groupId>
        <version>1.0-SNAPSHOT</version>
        <!--其中relativePath元素不是必须的，指定后会优先从指定的位置查找父pom。-->
        <!--<relativePath>../my-parent</relativePath>-->
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <packaging>war</packaging>

    <artifactId>springmvcxml</artifactId>

    <name>springmvcxml</name>
    <!-- FIXME change it to the project's website -->
    <url>http://www.example.com</url>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>

    <dependencies>

        <!--基本的springweb项目包含 spring-webmvc ,spring web{aop,beans,context,core,oxm;(servlet)}-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.0.7.RELEASE</version>
        </dependency>

        <!--scope的分类-->
        <!--默认就是compile，什么都不配置也就是意味着compile。-->
        <!--scope为test表示依赖项目仅仅参与测试相关的工作，包括测试代码的编译，执行。-->
        <!--runntime表示被依赖项目无需参与项目的编译，不过后期的测试和运行周期需要其参与。与compile相比，跳过编译而已，oracle jdbc驱动架包-->
        <!--provided意味着打包的时候可以不用包进去，别的设施(Web Container)会提供。-->
        <!--system 从参与度来说，也provided相同，不过被依赖项不会从maven仓库抓，而是从本地文件系统拿，-->
<!--        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>4.0.1</version>
            <scope>provided</scope>
        </dependency>-->

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <!--跳过测试-Dmaven.test.skip=true-->
        <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
            <plugins>
                <plugin>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>3.0.0</version>
                </plugin>
                <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
                <plugin>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.0.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.7.0</version>
                </plugin>
                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.20.1</version>
                </plugin>
                <plugin>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.0.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>2.5.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>2.8.2</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

<!--    在setting.xml中添加nexus服务器账号
    <servers>
        <server>&lt;!&ndash;正式发行仓库账号&ndash;&gt;
            <id>releases</id>
            <username>用户名</username>
            <password>密码</password>
        </server>
        <server>&lt;!&ndash;快照版发行仓库账号&ndash;&gt;
            <id>Snapshots</id>
            <username>用户名</username>
            <password>密码</password>
        </server>
    </servers>-->
<!--    用内部仓库镜像远程仓库提高下载速度
    <mirrors>
        <mirror>
            <id>nexus</id>
            <mirrorOf>*</mirrorOf>
            <url>内部公共仓库地址</url>
        </mirror>
    </mirrors>-->


    <!--配置pom.xml发布项目到私服 打包命令：mvn deploy-->
    <!--<distributionManagement>
        <repository>
            <id>releases</id>&lt;!&ndash;此处ID以上页server中的一致&ndash;&gt;
            <name>Internal Releases</name>
            <url>releases仓库地址</url>
        </repository>
        <snapshotRepository>
            <id>Snapshots</id>&lt;!&ndash;此处ID以上页server中的一致&ndash;&gt;
            <name>Internal Snapshots</name>
            <url>snapshots仓库地址</url>
        </snapshotRepository>
    </distributionManagement>-->

    <!--配置profile，内部仓库镜像远程仓库-->
<!--    <profiles>
        <profile>
            <id>nexus</id>
            <activation>
				<activeByDefault>true</activeByDefault>
			</activation>
            <repositories>
                <repository>
                    <id>central</id>
                    <url>http://repo1.maven.org/maven2/</url>
                    <releases><enabled>true</enabled></releases>
                    <snapshots><enabled>true</enabled></snapshots>
                </repository>
            </repositories>
            <pluginRepositories>
                <pluginRepository>
                    <id>central</id>
                    <url>http://repo1.maven.org/maven2/</url>
                    <releases><enabled>true</enabled></releases>
                    <snapshots><enabled>true</enabled></snapshots>
                </pluginRepository>
            </pluginRepositories>
        </profile>
    </profiles>-->

    <!--activation 上面配置默认自动激活。或者配置 settings.xml 文件 profile 激活。
    <activeProfiles>
        <activeProfile>nexus</activeProfile>
    </activeProfiles>-->

</project>
